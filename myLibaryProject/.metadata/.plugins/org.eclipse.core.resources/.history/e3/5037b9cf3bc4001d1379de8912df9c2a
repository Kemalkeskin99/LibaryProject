package kemalkeskin.rentABook.business.concretes;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import kemalkeskin.rentABook.business.abstracts.PublisherService;
import kemalkeskin.rentABook.business.requests.publisher.CreatePublisherRequest;
import kemalkeskin.rentABook.business.requests.publisher.UpdatePublisherRequest;
import kemalkeskin.rentABook.business.responses.publisher.GetAllPublisherResponse;
import kemalkeskin.rentABook.business.responses.publisher.GetByIdPublisherResponse;
import kemalkeskin.rentABook.business.rules.books.PublisherBusinessRules;
import kemalkeskin.rentABook.core.mapper.ModelMapperService;
import kemalkeskin.rentABook.dataAccess.abstracts.PublisherRepository;
import kemalkeskin.rentABook.entitities.concretes.Publisher;
import lombok.AllArgsConstructor;
@Service
@AllArgsConstructor
public class PublisherManager implements PublisherService {
	
	private PublisherRepository publisherRepository;
	private ModelMapperService modelMapperService;
	private PublisherBusinessRules publisherBusinessRules;

	@Override
	public List<GetAllPublisherResponse> getAll() {
		List<Publisher>publishers=publisherRepository.findAll();
		List<GetAllPublisherResponse>getAllPublisherResponses=publishers.stream().map(publisher->this.modelMapperService.forResponse().map(publisher, GetAllPublisherResponse.class)).collect(Collectors.toList());
		return getAllPublisherResponses;
	}

	@Override
	public GetByIdPublisherResponse getById(int id) {
		this.publisherBusinessRules.isExistsId(id);
		Optional<Publisher> publisher=publisherRepository.findById(id);
		GetByIdPublisherResponse getByIdPublisherResponse=this.modelMapperService.forResponse().map(publisher, GetByIdPublisherResponse.class); 
		return getByIdPublisherResponse;
	}

	@Override
	public void add(CreatePublisherRequest createPublisherRequest) {
		this.publisherBusinessRules.isRepeatName(createPublisherRequest.getPublisherName());
		Publisher publisher=this.modelMapperService.forRequest().map(createPublisherRequest, Publisher.class);
		this.publisherRepository.save(publisher);
		
	}

	@Override
	public void update(int id,UpdatePublisherRequest updatePublisherRequest) {
		this.publisherBusinessRules.isExistsId(updatePublisherRequest.getId());
		Publisher publisher=this.modelMapperService.forRequest().map(updatePublisherRequest, Publisher.class);
		this.publisherRepository.save(publisher);
		
		
	}

	@Override
	public void delete(int id) {
		this.publisherBusinessRules.isExistsId(id);
		this.publisherRepository.deleteById(id);
		
	}

}
